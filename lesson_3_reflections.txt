When would you want to use a remote repository rather than keeping all your work local?

A remote respository which never is pushed is effectively the same as a set of locally stored files. Nothing 
is really lost then (except a small amount of time) by making a project a remote repository. However, where one pushes that
remote  repository the files are now available on different machines.

The programmer who wants a way to conviently share a projects files, directory structure, and commit history probably will
find the remote repository to be a fantastic option. There are many situations where access to a repo accross many machines 
would be beneficial, such as for a public project where stakeholders would want to see the code, or for collaberation efforts
where teams can gain flexability through the ability to choose a work space for reasons other than necessity which is afforded
by the networking capabilities of remotes.

---------------------------------------------------------------------------

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

For my answer I am assuming that people might want to at some point push
breaking changes to code to github. Where multiple people are collaborating
on a feature one might want to push one's changes work to github. As this
is a feature with multiple people working on it, one person probably didn't
complete the feature in one commit. Therefore it probably dones not work.

If someone else is working on a different feature this breaking change might
interfere with his or her work. That person might want to run the code, or
might just want not to deal with another persons errors clogging their 
console.

----------------------------------------------------------------------------

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Clones exact copies of a repositories at a certain time. Forks are pretty
much the same thing. Forks are clones of Github hosted Repos cloned to some
other part of Github. 

Branches on the other hand are different heads (pointers to commits which
are not part of commits) which point to commits which are notnecessarily the
same but whose histories do converge onto the same commit at some point.

One would want to clone a repo whenever they want the data it contains on
his or her local machine. However, if someone wants to change that repo on
Github, does not want to edit the original repo or cannot, while still 
giving credit to the original authors, they can fork it.

Branching is used wherever one does not want to commit changes have changes
show up in the master quite yet or ever.

---------------------------------------------------------------------------

How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?

I could collaborate with others by means of some other version of 
version-control, or my fellow collaboraters and I would have to be passing
messages to eachother as we edited files so that we did not break eachothers
work. 

The great benefit of Git and Gitub is that it provides an efficient way to
manage and integrate individual changes to a project. Without using Git and
Github the easy for making a marginal change might be easier in terms of 
a work to output ratio, holding all else equal. However, the proplem is that
all else will likely not be equal. Without the use of the technologies the
work to integrate changes will become more demanding as the project scales.

---------------------------------------------------------------------------

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

Branches make cooperating much easier by allowing collaborators to work on
individual features of a project and write a changed version of the
project while not actually setting their changes in stone. If one decides 
to make changes to a project in the master branch and tries to evaluate each
feature or change before it is added one has to evaluate that feature or
change when it is still only an idea not after it is written.

The great value of making changes in branches than is the ablity to evaluate
not just an amorphis idea, but actual code. This actual code can be read 
through, it can be tested and its side effects can be actually seen not 
merely postulated on. With the perspective gained from actaully looking at
a finished product before deciding to integrate the fixes or features of a
branch one can make better decisions than they could without that 
perspective.

This perspective, like many things in the world, comes at a cost. The cost
is the time it takes to actaully manage these many branches.
